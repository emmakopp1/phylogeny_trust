}
res_st = compute_survival_prob(tree_st)
tree_st
res_st = compute_survival_prob(tree_st[[200]])
res_st$data
res_st$plot
compute_survival_prob_by_ages = function(tree){
t = as.numeric(distRoot(tree,1))
root = find_root(tree)
ks = (1:20)/t
# create 20 trees
for (k in ks) {
tree_k = tree
tree_k$edge.length = tree_k$edge.length * k
assign(paste0("tree_", k*t), tree_k)
}
q_theo =c()
for (k in 1:20){
tree_k = get(paste0("tree_",k))
q_theo=c(q_theo,Q(tree,root,mu*k/t)*200)
}
df_theo = data.frame(
age = 1:length(q_theo),
q_theo = q_theo
)
p = ggplot(df_theo, aes(x = age, y = q_theo)) +
geom_point(color = "darkblue") +
labs(
x = "age of the tree (in millenial)",
y = "",
title = ""
)+
theme(plot.title = element_text(hjust = 0.5))
return(list(
data=df_theo, plot=p
))
}
res_st = compute_survival_prob_by_ages(tree_st[[200]])
res_st$data
res_st$plot
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,tree_st)
# Empirical value
survival_frequency = function(path_cognates,tree){
root = find_root(tree)
# Subtrees
df = data_to_df(path_cognates)
rownames(df) = gsub("'",'', rownames(df))
tip_set = tips_of_subtree(tree)
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
return(list(
q_theo = Q(tree,root,mu)*200,
q_freq = sum(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1)
))
}
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,tree_st)
tree_st
sapply(tree_st, fun(arbre) survival_frequency(path_cognates_st,arbre))
sapply(tree_st, fun(arbre) survival_frequency(path_cognates_st,arbre)$q_theo)
sapply(tree_st, fun(arbre) survival_frequency(path_cognates_st,arbre$q_theo))
# Empirical value
survival_frequency = function(path_cognates,tree){
root = find_root(tree)
# Subtrees
df = data_to_df(path_cognates)
rownames(df) = gsub("'",'', rownames(df))
tip_set = tips_of_subtree(tree)
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
return(list(
q_theo = Q(tree,root,mu)*200,
q_freq = sum(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1)
))
}
sapply(tree_st, fun(arbre) survival_frequency(path_cognates_st,arbre$q_theo))
path_cognates_st
sapply(tree_st, fun(arbre) survival_frequency(path_cognates_st,arbre$q_theo))
# Survival probabilities
res_st = compute_survival_prob_by_ages(tree_st[[200]])
res_st$data
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,tree_st)
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,tree_st[[-1]])
tree_st
tree_st[[200]]
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,tree_st[[200]])
cat(
"Pour l'arbre d'âge",distRoot(tree_st,1)[[1]],"\n",
"valeur théorique:",
survival_frequency_st$q_theo,
"\n",
"valeur empirique:",
survival_frequency_st$q_freq ,"\n")
cat(
"Pour l'arbre d'âge",distRoot(tree_st[[200]],1)[[1]],"\n",
"valeur théorique:",
survival_frequency_st$q_theo,
"\n",
"valeur empirique:",
survival_frequency_st$q_freq ,"\n")
sample(1:10,3)
sample(4:10,3)
sample(10,3)
data_st = get_tree_par_fun(path,'sino-tibetan',200)
# config path
path = "/Users/kopp/Documents/chr_paper/compute_bounds/config.json"
extract_data(path,"label"sino-tibetan)
extract_data(path,sino-tibetan"")
extract_data(path,"sino-tibetan"")
exit()
:wq
rm(list=ls())
library(ape,castor)
library(phytools)
library(phangorn,stringr)
library(tidyr)
library(TreeDist)
library(adephylo)
library(ggplot2)
library(stringr)
library(cowplot)
library(patchwork)
##### Import file
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/function.R")})
# Config
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/compute_bounds/functions.R")})
path = "/Users/kopp/Documents/chr_paper/code/compute_bounds/config.json"
##### Parameter
mu = 0.2052587
path_cognates_st = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_data/cognates_st.txt"
path_cognates_bantu = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_data/cognates_bantu.txt"
path_cognates_iecor = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_data/cognates_iecor.txt"
# Data
data_st = get_tree_par_fun(path,'sino-tibetan',200)
phyread.nexus( "/Users/kopp/Documents/chr_paper/beast/sino-tibet-ctmc-strict-bd-fossilsRemoved/sino-tibetan-ctmc-strict-bd.trees")
phy=read.nexus( "/Users/kopp/Documents/chr_paper/beast/sino-tibet-ctmc-strict-bd-fossilsRemoved/sino-tibetan-ctmc-strict-bd.trees")
phy
N = length(phy)
0.2*N
trunc(0.2*N)
start = trunc(0.2*N)
path_to_trees = function(path,n_tree){
phy = read.nexus(path)
N = length(phy)
# Burn-in 20%
start = trunc(0.2*N)
if (n_tree==1){return(phy[length(phy)])}
if (n_tree>1){
n = sample(start:N,n_tree, replace=F)
return(phy[n])
}}
# Teee
tree_st = data_st$tree
# Survival probabilities
res_st = compute_survival_prob_by_ages(tree_st[[200]])
res_st$data
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,tree_st[[200]])
cat(
"Pour l'arbre d'âge",distRoot(tree_st[[200]],1)[[1]],"\n",
"valeur théorique:",
survival_frequency_st$q_theo,
"\n",
"valeur empirique:",
survival_frequency_st$q_freq ,"\n")
survival_frequency_st$q_theo
sapply(tree_st, fun(arbre) survival_frequency(path_cognates_st,arbre))
sapply(tree_st, function(arbre) survival_frequency(path_cognates_st,arbre))
sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre))
mean(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre)))
colmean(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre)))
colMeans(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre)))
colSums(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre)))
colSums(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre)),na.rm=T)
colSums(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre)),na.rm=F)
sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre))
tt=sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre))
typeof(tt)
tt[1,]
tt[[1]]
tt[[1,]]
tt[1,]
as.data.frame(tt)
colMeans(as.data.frame(tt))
as.numeric(tt)
as.numeric(as.data.frame(tt))
as.data.frame(tt)
ttt=as.data.frame(tt)
ttt
as.numeric(ttt)
View(ttt)
ttt[1,]
mean(ttt[1,])
lapply(as.numeric,ttt)
lapply(ttt,as.numeric)
lapply(tt,as.numeric)
ttt
View(ttt)
as.data.frame(lapply(tt, as.numeric))
as.data.frame(lapply(ttt, as.numeric))
sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre))
# Empirical value
survival_frequency = function(path_cognates,tree){
root = find_root(tree)
# Subtrees
df = data_to_df(path_cognates)
rownames(df) = gsub("'",'', rownames(df))
tip_set = tips_of_subtree(tree)
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
return(list(
q_theo = as.numeric(Q(tree,root,mu)*200),
q_freq = as.numeric(sum(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1))
))
}
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,tree_st[[200]])
sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre))
colMeans(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre))
colMeans(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre)))
sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre))
as.data.frame(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre)))
tt=as.data.frame(sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre)))
colMeans(tt)
typeof(survival_frequency_st)
typeof(survival_frequency_st$q_theo)
typeof(survival_frequency_st$q_freq)
# Empirical value
survival_frequency = function(path_cognates,tree){
root = find_root(tree)
# Subtrees
df = data_to_df(path_cognates)
rownames(df) = gsub("'",'', rownames(df))
tip_set = tips_of_subtree(tree)
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
return(
c(as.numeric(Q(tree,root,mu)*200),as.numeric(sum(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1))
))
}
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,tree_st[[200]])
cat(
"Pour l'arbre d'âge",distRoot(tree_st[[200]],1)[[1]],"\n",
"valeur théorique:",
survival_frequency_st[1],
"\n",
"valeur empirique:",
survival_frequency_st[2] ,"\n")
tt=sapply(tree_st[1:2], function(arbre) survival_frequency(path_cognates_st,arbre))
tt
colMeans(tt)
rowMeans(tt)
tt
cat(
"Pour l'arbre d'âge",distRoot(tree_st[[200]],1)[[1]],"\n",
"valeur théorique:",
survival_frequency_st[1],
"\n",
"valeur empirique:",
survival_frequency_st[2] ,"\n")
tt
cat(
"Pour l'arbre d'âge",distRoot(tree_st[[200]],1)[[1]],"\n",
"valeur théorique:",
survival_frequency_st[1],
"\n",
"valeur empirique:",
survival_frequency_st[2] ,"\n")
sapply(tree_st[199:200], function(arbre) survival_frequency(path_cognates_st,arbre))
colMeans(sapply(tree_st[199:200], function(arbre) survival_frequency(path_cognates_st,arbre)))
rowMeans(sapply(tree_st[199:200], function(arbre) survival_frequency(path_cognates_st,arbre)))
sapply(tree_st[199:200], function(arbre) survival_frequency(path_cognates_st,arbre))
lapply(tree_st[199:200], function(arbre) survival_frequency(path_cognates_st,arbre))
sapply(tree_st[199:200], function(arbre) survival_frequency(path_cognates_st,arbre))
rm(list=ls())
library(ape,castor)
library(phytools)
library(phangorn,stringr)
library(tidyr)
library(TreeDist)
library(adephylo)
library(ggplot2)
library(stringr)
library(cowplot)
library(patchwork)
##### Import file
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/function.R")})
# Config
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/compute_bounds/functions.R")})
path = "/Users/kopp/Documents/chr_paper/code/compute_bounds/config.json"
##### Parameter
mu = 0.2052587
path_cognates_st = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_data/cognates_st.txt"
path_cognates_bantu = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_data/cognates_bantu.txt"
path_cognates_iecor = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_data/cognates_iecor.txt"
path_to_trees = function(path,n_tree){
phy = read.nexus(path)
N = length(phy)
# Burn-in 20%
start = trunc(0.2*N)
if (n_tree==1){return(phy[length(phy)])}
if (n_tree>1){
n = sample(start:N,n_tree, replace=F)
return(phy[n])
}}
# Data
data_st = get_tree_par_fun(path,'sino-tibetan',50)
data_st$tree
# Teee
tree_st = data_st$tree
# Survival probabilities
res_st = compute_survival_prob_by_ages(tree_st[[200]])
res_st$data
# Survival probabilities
res_st = compute_survival_prob_by_ages(tree_st[[200]])
# Survival probabilities
res_st = compute_survival_prob_by_ages(tree_st[[50]])
res_st$data
res_st$plot
df_theo_freq=sapply(tree_st, function(arbre) survival_frequency(path_cognates_st,arbre))
df_theo_freq
View(df_theo_freq)
rowMeans(df_theo_freq)
as.numeric(df_theo_freq)
df_theo_freq=sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200))
df_theo_freq
df_theo_freq=list(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200)))
df_theo_freq
as.list(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200)))
sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200))
list(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200)))
df_theo_freq=uname(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200)))
df_theo_freq=sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200))
unname(df_theo_freq)
df_theo_freq = unname(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200)))
View(df_theo_freq)
df_theo_freq
typeof(df_theo_freq)
df_theo_freq[1]
df_theo_freq[[1]]
df_theo_freq = mean(unname(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200))))
df_theo_freq = unname(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200)))
l_theo_freq = unname(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200)))
mean(l_theo_freq)
# Empirical value
survival_frequency = function(path_cognates,tree){
root = find_root(tree)
# Subtrees
df = data_to_df(path_cognates)
rownames(df) = gsub("'",'', rownames(df))
tip_set = tips_of_subtree(tree)
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
return(
as.numeric(sum(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1))
)
}
# Empirical value
survival_frequency = function(path_cognates,root){
# Subtrees
df = data_to_df(path_cognates)
rownames(df) = gsub("'",'', rownames(df))
tip_set = tips_of_subtree(tree)
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
return(
as.numeric(sum(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1))
)
}
find_root(tree_st[[200]])
find_root(tree_st[200])
find_root(tree_st)
tree_st
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,find_root(tree_st[[50]]))
find_root(tree_st[[1]])
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,find_root(tree_st[[1]]))
# Empirical value
survival_frequency = function(path_cognates,tree){
root = find_root(tree)
# Subtrees
df = data_to_df(path_cognates)
rownames(df) = gsub("'",'', rownames(df))
tip_set = tips_of_subtree(tree)
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
return(
as.numeric(sum(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1))
)
}
# Export data
survival_frequency_st = survival_frequency(path_cognates_st,tree_st[[1]])
l_theo = unname(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200)))
mean(l_theo)
l_freq = unname(sapply(tree_st, function(arbre) survival_frequency(path_cognates_st,arbre)))
l_freq
tips_of_subtree(tree_st[1])
tips_of_subtree(tree_st[[1]])
sapply(tree_st, function(arbre) tips_of_subtree(arbre))
lapply(tree_st, function(arbre) tips_of_subtree(arbre))
tips_of_subtree(tree[1])
tips_of_subtree(tree[[1]])
tips_of_subtree(tree_st[[1]])
tips_of_subtree(tree_st[[1]])$A
tt=tips_of_subtree(tree_st[[1]])$A
is.monophyletic(tree_st,tt)
is.monophyletic(tree_st,tt)
tree_st
class(tree_st)
is.monophyletic(tree_st,tt)
as.phylo(tree_st)
?is.monophyletic
sapply(tree_st, function(arbre) is.monophyletic(arbre,tt))
mean(multiPhylo)
mean(sapply(tree_st, function(arbre) is.monophyletic(arbre,tt)))
mean(sapply(tree_st, function(arbre) is.monophyletic(arbre,tt)))
# Data
data_st = get_tree_par_fun(path,'sino-tibetan',500)
# Teee
tree_st = data_st$tree
tree_st
mean(sapply(tree_st, function(arbre) is.monophyletic(arbre,tt)))
# Data
data_st = get_tree_par_fun(path,'sino-tibetan',50)
l_freq = unname(sapply(tree_st, function(arbre) survival_frequency(path_cognates_st,arbre)))
mean(l_freq)
l_freq
which(l_freq!=58)
tips_of_subtree(tree_st[[53]])
lapply(tree_st[[which(l_freq!=58)]], function(arbre) tips_of_subtree(arbre))
lapply(tree_st[which(l_freq!=58)], function(arbre) tips_of_subtree(arbre))
l_freq_st = l_freq
mean(l_theo_st)
l_theo_st = unname(sapply(tree_st, function(arbre) as.numeric(Q(arbre,find_root(arbre),mu)*200)))
mean(l_theo_st)
cat(
"Pour l'arbre d'âge",distRoot(tree_st[[200]],1)[[1]],"\n",
"valeur théorique:",
mean(l_theo_st),
"\n",
"valeur empirique:",
mean(l_freq_st),"\n")
extract_data = function(path,label){
dc_label_data = fromJSON(path)
data = dc_label_data[[label]]
return(list(
path = data[[1]],
pi0 = as.numeric(data[[2]]),
pi1 = as.numeric(data[[3]]),
k=as.numeric(data[[4]]),
path_cognate= data[[5]]
))
}
path_cognates_st = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_data/cognates_st.txt"
# Data
data_st = get_tree_par_fun(path,'sino-tibetan',50)
extract_data = function(path,label){
dc_label_data = fromJSON(path)
data = dc_label_data[[label]]
return(list(
path = data[[1]],
pi0 = as.numeric(data[[2]]),
pi1 = as.numeric(data[[3]]),
k=as.numeric(data[[4]]),
path_cognates= data[[5]]
))
}
# ----------- To compute bounds  ----------------
get_tree_par_fun = function(path,label,n_tree){
data = extract_data(path,label)
tree=path_to_trees(data$path,n_tree)
param = get_tree_param(tree,data$pi0,data$pi1,data$k)
f_topology = vectorize_function(compute_upper_bound_topology,param,type="topology")
f_root = vectorize_function(compute_upper_bound_root,param,type="root")
return(
list(tree=tree,param=param,f_topology=f_topology,f_root=f_root,path_cognates = data$path_cognates)
)
}
path_cognates_st = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_data/cognates_st.txt"
# Data
data_st = get_tree_par_fun(path,'sino-tibetan',50)
data_st$path_cognates
rm(list=ls())
library(ape,castor)
library(phytools)
library(phangorn,stringr)
library(tidyr)
library(TreeDist)
library(adephylo)
library(ggplot2)
library(stringr)
library(cowplot)
library(patchwork)
##### Import file
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/function.R")})
# Config
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/compute_bounds/functions.R")})
path = "/Users/kopp/Documents/chr_paper/code/compute_bounds/config.json"
##### Parameter
mu = 0.2052587
# Data
data_st = get_tree_par_fun(path,'sino-tibetan',50)
# Teee
tree_st = data_st$tree
l_freq_st = unname(sapply(tree_st[1:1], function(arbre) survival_frequency(data_st$path_cognates,arbre)))
mean(l_freq_st)

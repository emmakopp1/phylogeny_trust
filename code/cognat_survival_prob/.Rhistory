rm(list=ls())
library(ape)
library(castor)
library(phytools)
library(phangorn)
library(stringr)
# Printing settings
options(max.print = 5000)
options(max.print = getOption("max.print"))
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/function.R")})
# Import tree
trees = read.nexus("/Users/kopp/Documents/chr_paper/beast/sino-tibet-ctmc-strict-bd-fossilsRemoved/sino-tibetan-ctmc-strict-bd.trees")
tree = trees$STATE_19990000
plot(tree)
# Parameter
mu = 0.2052587
# Probabilty of survival in both subtrees induces by the root
root = find_root(tree)
Q(tree,root)
# Checking
path = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates.txt"
data = readLines(path)
child1 = Descendants(tree, root, type = c("children"))[[1]]
tips = tree$tip.label[Descendants(tree, child1, type = c("tips"))[[1]]]
tips
tips_of_subtree = function(tree){
root = find_root(tree)
child1 = Descendants(tree, root, type = c("children"))[[1]]
tipsA = tree$tip.label[Descendants(tree, child1, type = c("tips"))[[1]]]
tipsB = setdiff(tree$tip.label,tipsA)
return(list(tipsA=tipsA, tipsB=tipsB))
}
rm(list=ls())
library(ape)
library(castor)
library(phytools)
library(phangorn)
library(stringr)
# Printing settings
options(max.print = 5000)
options(max.print = getOption("max.print"))
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/function.R")})
# Import tree
trees = read.nexus("/Users/kopp/Documents/chr_paper/beast/sino-tibet-ctmc-strict-bd-fossilsRemoved/sino-tibetan-ctmc-strict-bd.trees")
tree = trees$STATE_19990000
plot(tree)
# Parameter
mu = 0.2052587
# Probabilty of survival in both subtrees induces by the root
root = find_root(tree)
Q(tree,root)
# Checking
path = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates.txt"
data = readLines(path)
##### From text file to data frame
x = str_squish(data[1])
x_name = unlist(strsplit(x," "))[1]
x_vec = unlist(strsplit(x," "))[2]
x_vec = unlist(strsplit(x_vec, ""))
df = data.frame(
Name = x_name,
setNames(as.data.frame(matrix(x_vec, ncol = length(x_vec),byrow = TRUE)), paste0("Bit", 1:length(x_vec)))
)
for (k in 2:length(data)){
x = str_squish(data[k])
# Tip name
x_name = unlist(strsplit(x," "))[1]
# Vecteur
x_vec = unlist(strsplit(x," "))[2]
x_vec = unlist(strsplit(x_vec, ""))
df=rbind(df, c(x_name,x_vec))
}
names = df$Name
df = df[,2:length(df)]
df = as.data.frame(sapply(df, as.integer))
rownames(df) = names
test = tips_of_subtree(tree)
tips_of_subtree = function(tree){
root = find_root(tree)
child1 = Descendants(tree, root, type = c("children"))[[1]]
tipsA = tree$tip.label[Descendants(tree, child1, type = c("tips"))[[1]]]
tipsB = setdiff(tree$tip.label,tipsA)
return(list(tipsA=tipsA, tipsB=tipsB))
}
test = tips_of_subtree(tree)
test$tipsA
test$tipsB
tip_set = tips_of_subtree(tree)
# Separate the tip of tree into two set regarding to the subtrees induced by the root
tips_of_subtree = function(tree){
root = find_root(tree)
child1 = Descendants(tree, root, type = c("children"))[[1]]
tipsA = tree$tip.label[Descendants(tree, child1, type = c("tips"))[[1]]]
tipsB = setdiff(tree$tip.label,tipsA)
return(list(A=tipsA, B=tipsB))
}
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
mean(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1)
rm(list=ls())
library(ape)
library(castor)
library(phytools)
library(phangorn)
library(stringr)
# Printing settings
options(max.print = 5000)
options(max.print = getOption("max.print"))
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/function.R")})
# Import tree
trees = read.nexus("/Users/kopp/Documents/chr_paper/beast/sino-tibet-ctmc-strict-bd-fossilsRemoved/sino-tibetan-ctmc-strict-bd.trees")
tree = trees$STATE_19990000
plot(tree)
# Parameter
mu = 0.2052587
# Probabilty of survival in both subtrees induces by the root
root = find_root(tree)
Q(tree,root)
# Checking
path = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates.txt"
data = readLines(path)
##### From text file to data frame
x = str_squish(data[1])
x_name = unlist(strsplit(x," "))[1]
x_vec = unlist(strsplit(x," "))[2]
x_vec = unlist(strsplit(x_vec, ""))
df = data.frame(
Name = x_name,
setNames(as.data.frame(matrix(x_vec, ncol = length(x_vec),byrow = TRUE)), paste0("Bit", 1:length(x_vec)))
)
for (k in 2:length(data)){
x = str_squish(data[k])
# Tip name
x_name = unlist(strsplit(x," "))[1]
# Vecteur
x_vec = unlist(strsplit(x," "))[2]
x_vec = unlist(strsplit(x_vec, ""))
df=rbind(df, c(x_name,x_vec))
}
names = df$Name
df = df[,2:length(df)]
df = as.data.frame(sapply(df, as.integer))
rownames(df) = names
View(df)
tip_set = tips_of_subtree(tree)
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
mean(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1)
test = read.csv2("/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_copie.txt", sep="")
View(test)
View(test)
test = read.csv2("/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates_copie.txt", sep="", header=F)
View(test)
library(tidyr)
View(test)
test2 = separate(test, V2, into = paste0("colonne_", 1:ncol(test)), sep = "")
View(test2)
test2 = separate(test, "V2", into = paste0("colonne_", 1:ncol(test)), sep = "")
colnames(test)
ncol(test)
test2 = separate(test, "V2", into = paste0("colonne_", 1:nrow(test)), sep = "")
test2 = separate(test, "V2", into = paste0("colonne_", 1:3784, sep = "")
length
length
)
# From .txt file to dataframe
data_to_df = function(data){
# Initialisation
x = str_squish(data[1])
x_name = unlist(strsplit(x," "))[1]
x_vec = unlist(strsplit(x," "))[2]
x_vec = unlist(strsplit(x_vec, ""))
df = data.frame(
Name = x_name,
setNames(as.data.frame(matrix(x_vec, ncol = length(x_vec),byrow = TRUE)), paste0("Bit", 1:length(x_vec)))
)
# Recurence
for (k in 2:length(data)){
x = str_squish(data[k])
# Tip name
x_name = unlist(strsplit(x," "))[1]
# Vecteur
x_vec = unlist(strsplit(x," "))[2]
x_vec = unlist(strsplit(x_vec, ""))
df=rbind(df, c(x_name,x_vec))
}
return(df)
}
# Checking
path = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates.txt"
data = readLines(path)
##### From text file to data frame
df = data_to_df(data)
View(df)
# From .txt file to dataframe
data_to_df = function(path){
# Checking
data = readLines(path)
# Initialisation
x = str_squish(data[1])
x_name = unlist(strsplit(x," "))[1]
x_vec = unlist(strsplit(x," "))[2]
x_vec = unlist(strsplit(x_vec, ""))
df = data.frame(
Name = x_name,
setNames(as.data.frame(matrix(x_vec, ncol = length(x_vec),byrow = TRUE)), paste0("Bit", 1:length(x_vec)))
)
# Recurence
for (k in 2:length(data)){
x = str_squish(data[k])
# Tip name
x_name = unlist(strsplit(x," "))[1]
# Vecteur
x_vec = unlist(strsplit(x," "))[2]
x_vec = unlist(strsplit(x_vec, ""))
df=rbind(df, c(x_name,x_vec))
}
# Index
names = df$Name
df = df[,2:length(df)]
df = as.data.frame(sapply(df, as.integer))
rownames(df) = names
return(df)
}
# Export data
path = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates.txt"
df = data_to_df(path)
rm(list=ls())
library(ape,castor)
rm(list=ls())
library(ape,castor,phytools,phangorn,stringr,tidyr)
library(ape,castor,phytools,"phangorn",stringr,tidyr)
library(ape,castor,phytools,stringr,tidyr)
library(ape,castor,phytools)
library(phangorn)
library(phangorn,stringr)
library(phangorn,stringr,tidyr)
rm(list=ls())
library(ape,castor,phytools)
library(phangorn,stringr,tidyr)
# Printing settings
options(max.print = 5000)
options(max.print = getOption("max.print"))
suppressWarnings({source("/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/function.R")})
# Parameter
mu = 0.2052587
path_tree = "/Users/kopp/Documents/chr_paper/beast/sino-tibet-ctmc-strict-bd-fossilsRemoved/sino-tibetan-ctmc-strict-bd.trees"
path_cognates = "/Users/kopp/Documents/chr_paper/code/cognat_survival_prob/cognates.txt"
# Import tree
trees = read.nexus(path_tree)
tree = trees$STATE_19990000
plot(tree)
# Probabilty of survival in both subtrees induces by the root
root = find_root(tree)
Q(tree,root)
# Export data
df = data_to_df(path_cognates)
tip_set = tips_of_subtree(tree)
dfA = df[tip_set$A ,]
dfB = df[tip_set$B,]
mean(colSums(dfA, na.rm=T) >=1 & colSums(dfB, na.rm=T) >=1)
